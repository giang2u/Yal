package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expression.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.tds.*;

import java_cup.runtime.*;

action code {:
  //BlocDInstructions arbre = new BlocDInstructions(0) ;
 // BlocDInstructions arbreBoucle = new BlocDInstructions(0) ;

             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER,EGAL, PROGRAMME ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON,POINTVIRGULE;
terminal String    CONSTANTEINT, CONSTANTEBOOL,TYPE,IDF, FIN, DEBUT,ECRIRE,CSTECHAINE ;
terminal String    TANTQUE,FINTANTQUE,SI,SINON,FSI,ALORS,REPETER,LIRE,FONCTION,VIRGULE ;


/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG,LISTDECLARATION,LINST,DECLARATION,DECL_VAR, INSTRUCTION, AFFECT;
non terminal ArbreAbstrait ECRITURE,LECTURE, BOUCLE,CONDITION,PARAMETRES,LISTEPARAM,DECL_FONCTION,PAR_EFF;
non terminal Expression EXPR, CSTE ;

precedence left OU ;
precedence left ET ;
precedence left EGALEGAL, DIFF;
precedence left INF, SUP ;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;


PROG	::=		PROGRAMME IDF DEBUT LISTDECLARATION:d LINST:li FIN
				{: 
					RESULT=li; 
				:}
        |
        PROGRAMME IDF DEBUT LINST:i FIN
        {: 
        	RESULT=i; :}
        ;


LISTDECLARATION   ::=  LISTDECLARATION:lidecl DECLARATION:decl
                {:
                  ((BlocDInstructions)lidecl).ajouter(decl);
                  RESULT=lidecl;
                :}
                |
                DECLARATION:d
                {:
				BlocDInstructions arbre = new BlocDInstructions(0) ;
               
                  arbre.ajouter(d);
                  RESULT=arbre;
                :}
                ;

DECLARATION   ::=   DECL_VAR:dv
                {:
                  RESULT=dv;
                :}
                |
                DECL_FONCTION:df
                {:
                	RESULT=df;
                :}
                ;


DECL_VAR::=TYPE IDF:idf POINTVIRGULE
          {://rajoute les entres et symboles et tds
          	SymboleVariable s = new SymboleVariable(0);
          	EntreeVariable entre = new EntreeVariable(idf);
          	Tds.getInstance().ajouter(entre,s);
            RESULT=new Idf(idf,idfleft+1);
          :}

          ;

DECL_FONCTION::=FONCTION IDF:idf PARAMETRES DEBUT LINST:li FIN
		{:
		
		:}
		|FONCTION IDF:idf PARAMETRES DEBUT DECL_VAR:dv LINST:li FIN
		{:
			
		:}
		;
		
PARAMETRES ::= PAROUV PARFER{:
		:}
		|
		PAROUV LISTEPARAM PARFER
		{:
			
		:};
LISTEPARAM ::=TYPE IDF:i 
		{:
		
		:}
		| TYPE IDF:i POINTVIRGULE LISTEPARAM
		{:
			
		:}
		;

LINST	::= LINST:li INSTRUCTION:i

		{: ((BlocDInstructions)li).ajouter(i);
			RESULT=li ; 
		:}
		| INSTRUCTION:i
		{: 
			BlocDInstructions arbre = new BlocDInstructions(0) ;
		
			arbre.ajouter(i);
			RESULT=arbre; :}
		;

INSTRUCTION   ::=   AFFECT:a
				{:
            RESULT=a;
        :}
        | ECRITURE:e
        {:
          RESULT=e;
        :}
        | BOUCLE:b
        {:
          RESULT=b;
        :}
        | CONDITION:c
        {:
          RESULT=c;
        :}
        | LECTURE:le
        {:
        RESULT=le;
        :}
        ;

AFFECT   ::=   IDF:i   EGAL   EXPR:e   POINTVIRGULE
				{:
        //RESULT = new Affectation(eleft+1, i, e);
        RESULT = new Affectation(eleft+1, new Idf(i,ileft+1), e);

        :}
				 ;
ECRITURE::= ECRIRE EXPR:e POINTVIRGULE
        {:
          RESULT=new Ecrire(e,eleft+1);
        :}
        |
        ECRIRE CSTECHAINE:csteCH POINTVIRGULE
        {:
          StockChaine.getInstance().ajouter(csteCH);
          RESULT=new Ecrire(csteCH,csteCHleft+1);
        :};
LECTURE::=LIRE EXPR:e POINTVIRGULE
        {:
          RESULT=new Lire(e,eleft);
        :};

        
CONDITION::=SI EXPR:e ALORS FSI
      {:
		RESULT=new Condition(e,eleft+1);		
      :}
      | SI EXPR:e ALORS LINST:li FSI
      {:
		RESULT=new Condition(e,(BlocDInstructions)li,eleft+1);
      :}
      |  SI EXPR:e ALORS SINON LINST:lisinon FSI
      {:
      		
      		RESULT=new Condition(e,eleft+1,(BlocDInstructions)lisinon);
      
      :}
      | 
      SI EXPR:e ALORS LINST:lisi SINON LINST:lisinon FSI
      {:
 
      		RESULT=new Condition(e,(BlocDInstructions)lisi,eleft+1,(BlocDInstructions)lisinon);
      
      :}
      ;
      
BOUCLE::=TANTQUE EXPR:e REPETER  LINST:lis FINTANTQUE
      {:	
      		BlocDInstructions bloc = new BlocDInstructions(0);
			bloc.ajouter(lis);
			RESULT= new BoucleTANT(eleft+1,e,bloc);
      :};

EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        |
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |
                MOINS  EXPR:e
                {: RESULT = new MoinsUnaire(e); :}
        |
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
        |       IDF:e
                {:
                  RESULT=new Idf(e,eleft+1);
                :}
        |		IDF:e PAROUV PAR_EFF PARFER
        		{:
        		//	RESULT=new Fonction();
        		:}
        |		IDF:e PAROUV PARFER
        		{:
        		:}
                ;
                
PAR_EFF::= EXPR:e
				{:
				:}
		| EXPR:e VIRGULE PAR_EFF
				{:
				:}
				;
CSTE    ::=     CONSTANTEINT:e
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
;
